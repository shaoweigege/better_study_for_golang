/**
	学习复合数据类型-数组
 */
package main

import "fmt"

func main() {
	// 定义三个整数的数组  var a = [3]int{1,2,3}
	var a [3]int
	a = [3]int{1,2,3}

	fmt.Println(a[0])        // 打印第一个元素
	fmt.Println(a[len(a)-1]) // 打印最后一个元素

	// 打印索引和元素
	for i, v := range a {
		fmt.Printf("%d %d\n", i, v)
	}
	// 仅打印元素
	for _, v := range a {
		fmt.Printf("%d\n", v)
	}

	//比较两个数组是否相等  数组的长度相同，数组中元素的类型相同、所有元素都是相等
	c := [3]int{1,2,3}
	fmt.Println(c == a)

	//多维数组  var array_name [size1][size2]...[sizen] array_type
	var arr = [4][2]int{{10, 11}, {20, 21}, {30, 31}, {40, 41}}
	fmt.Println(arr[0][1])
}
/*
	总结：
	1、数组是具有相同 唯一类型的一组已编号且长度固定的数据项序列（这是一种同构的数据结构）
	2、数据项类型可以是任意的原始类型例如整型、字符串或者自定义类型
	3、如果我们想让数组元素类型为任意类型的话可以使用空接口作为类型【后面细讲】
	4、数组长度也是数组类型的一部分，所以 [5] int 和 [10] int 是属于不同类型的
	5、数组元素可以通过 索引（位置）来读取（或者修改），索引从 0 开始
	6、数组的长度必须是固定的并且在声明该数组时就给出（编译时需要知道数组长度以便分配内存）；数组长度最大为 2Gb。
	7、Go 语言中的数组是一种值类型，如当一个大数组传递给函数会消耗很多内存，因为是值传递，内存空间会复制出一份。
数组在go中不常用，通常使用切片，但是了解切片前需要先了解数组

*/



